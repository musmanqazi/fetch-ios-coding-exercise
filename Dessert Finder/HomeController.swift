//
//  ViewController.swift
//  Dessert Finder
//
//  Created by Usman Qazi on 6/14/24.
//

import UIKit

class HomeController: UIViewController {

    @IBOutlet var tableView : UITableView!
    var meal : Meal?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        tableView.delegate = self
        tableView.dataSource = self
        
        getDessertData()
    }
    
    func getDessertData() {
        let url = URL(string: "https://themealdb.com/api/json/v1/1/lookup.php?i=53049")!
        let request = URLRequest(url: url)
        
        let task = URLSession.shared.dataTask(with: request) { (data, response, error) in
            if let error = error {
                print("HTTP Request Error: \(error)")
            } else if let data = data {
                let decoder = JSONDecoder()
                do {
                    let jsonResponse = try decoder.decode(Response.self, from: data)
                    self.meal = jsonResponse.meals.first
                    OperationQueue.main.addOperation {
                        self.tableView.reloadData()
                    }
                } catch {
                    print("Decoding Error: \(error)")
                }
            } else {
                print("Unexpected HTTP Error")
            }
        }
        task.resume()
    }
}

struct Meal : Codable {
    var strMeal : String
    var strArea : String
    var strMealThumb : String
}

struct Response : Codable {
    var meals : [Meal]
}

extension HomeController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return meal == nil ? 0 : 1
    }
}

extension HomeController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath) as! CustomTableViewCell
        
        cell.nameOfDessert.text = meal!.strMeal
//        cell.countryOfOrigin.text = meal!.strArea
        let countryFlags: [String: String] = [
            "Afghanistani": "ğŸ‡¦ğŸ‡«", "Albanian": "ğŸ‡¦ğŸ‡±", "Algerian": "ğŸ‡©ğŸ‡¿", "Andorran": "ğŸ‡¦ğŸ‡©", "Angolan": "ğŸ‡¦ğŸ‡´",
            "Antiguan": "ğŸ‡¦ğŸ‡¬", "Argentinian": "ğŸ‡¦ğŸ‡·", "Armenian": "ğŸ‡¦ğŸ‡²", "Australian": "ğŸ‡¦ğŸ‡º", "Austrian": "ğŸ‡¦ğŸ‡¹",
            "Azerbaijani": "ğŸ‡¦ğŸ‡¿", "Bahamian": "ğŸ‡§ğŸ‡¸", "Bahraini": "ğŸ‡§ğŸ‡­", "Bangladeshi": "ğŸ‡§ğŸ‡©", "Barbadian": "ğŸ‡§ğŸ‡§",
            "Belarusian": "ğŸ‡§ğŸ‡¾", "Belgian": "ğŸ‡§ğŸ‡ª", "Belizean": "ğŸ‡§ğŸ‡¿", "Beninese": "ğŸ‡§ğŸ‡¯", "Bermudian": "ğŸ‡§ğŸ‡²", "Bhutanese": "ğŸ‡§ğŸ‡¹",
            "Bolivian": "ğŸ‡§ğŸ‡´", "Bosnian": "ğŸ‡§ğŸ‡¦", "Motswana": "ğŸ‡§ğŸ‡¼", "Brazilian": "ğŸ‡§ğŸ‡·", "Bruneian": "ğŸ‡§ğŸ‡³",
            "Bulgarian": "ğŸ‡§ğŸ‡¬", "Burkinabe": "ğŸ‡§ğŸ‡«", "Burundian": "ğŸ‡§ğŸ‡®", "Cambodian": "ğŸ‡°ğŸ‡­", "Cameroonian": "ğŸ‡¨ğŸ‡²",
            "Canadian": "ğŸ‡¨ğŸ‡¦", "Cape Verdean": "ğŸ‡¨ğŸ‡»", "Central African": "ğŸ‡¨ğŸ‡«", "Chadian": "ğŸ‡¹ğŸ‡©", "Chilean": "ğŸ‡¨ğŸ‡±",
            "Chinese": "ğŸ‡¨ğŸ‡³", "Colombian": "ğŸ‡¨ğŸ‡´", "Comorian": "ğŸ‡°ğŸ‡²", "Congolese": "ğŸ‡¨ğŸ‡¬", "Congolese (Democratic Rep)": "ğŸ‡¨ğŸ‡©",
            "Costa Rican": "ğŸ‡¨ğŸ‡·", "Croatian": "ğŸ‡­ğŸ‡·", "Cuban": "ğŸ‡¨ğŸ‡º", "Cypriot": "ğŸ‡¨ğŸ‡¾", "Czech": "ğŸ‡¨ğŸ‡¿",
            "Danish": "ğŸ‡©ğŸ‡°", "Djiboutian": "ğŸ‡©ğŸ‡¯", "Dominican": "ğŸ‡©ğŸ‡²", "Dominican Republic": "ğŸ‡©ğŸ‡´", "East Timorese": "ğŸ‡¹ğŸ‡±",
            "Ecuadorian": "ğŸ‡ªğŸ‡¨", "Egyptian": "ğŸ‡ªğŸ‡¬", "Salvadoran": "ğŸ‡¸ğŸ‡»", "Equatorial Guinean": "ğŸ‡¬ğŸ‡¶", "Eritrean": "ğŸ‡ªğŸ‡·",
            "Estonian": "ğŸ‡ªğŸ‡ª", "Eswatini": "ğŸ‡¸ğŸ‡¿", "Ethiopian": "ğŸ‡ªğŸ‡¹", "Fijian": "ğŸ‡«ğŸ‡¯", "Finnish": "ğŸ‡«ğŸ‡®", "French": "ğŸ‡«ğŸ‡·",
            "Gabonese": "ğŸ‡¬ğŸ‡¦", "Gambian": "ğŸ‡¬ğŸ‡²", "Georgian": "ğŸ‡¬ğŸ‡ª", "German": "ğŸ‡©ğŸ‡ª", "Ghanaian": "ğŸ‡¬ğŸ‡­", "Greek": "ğŸ‡¬ğŸ‡·",
            "Grenadian": "ğŸ‡¬ğŸ‡©", "Guatemalan": "ğŸ‡¬ğŸ‡¹", "Guinean": "ğŸ‡¬ğŸ‡³", "Guinea-Bissauan": "ğŸ‡¬ğŸ‡¼", "Guyanese": "ğŸ‡¬ğŸ‡¾",
            "Haitian": "ğŸ‡­ğŸ‡¹", "Honduran": "ğŸ‡­ğŸ‡³", "Hungarian": "ğŸ‡­ğŸ‡º", "Icelander": "ğŸ‡®ğŸ‡¸", "Indian": "ğŸ‡®ğŸ‡³", "Indonesian": "ğŸ‡®ğŸ‡©",
            "Iranian": "ğŸ‡®ğŸ‡·", "Iraqi": "ğŸ‡®ğŸ‡¶", "Irish": "ğŸ‡®ğŸ‡ª", "Israeli": "ğŸ‡®ğŸ‡±", "Italian": "ğŸ‡®ğŸ‡¹",
            "Ivorian": "ğŸ‡¨ğŸ‡®", "Jamaican": "ğŸ‡¯ğŸ‡²", "Japanese": "ğŸ‡¯ğŸ‡µ", "Jordanian": "ğŸ‡¯ğŸ‡´", "Kazakhstani": "ğŸ‡°ğŸ‡¿",
            "Kenyan": "ğŸ‡°ğŸ‡ª", "I-Kiribati": "ğŸ‡°ğŸ‡®", "North Korean": "ğŸ‡°ğŸ‡µ", "South Korean": "ğŸ‡°ğŸ‡·", "Kosovar": "ğŸ‡½ğŸ‡°",
            "Kuwaiti": "ğŸ‡°ğŸ‡¼", "Kyrgyz": "ğŸ‡°ğŸ‡¬", "Laotian": "ğŸ‡±ğŸ‡¦", "Latvian": "ğŸ‡±ğŸ‡»", "Lebanese": "ğŸ‡±ğŸ‡§", "Basotho": "ğŸ‡±ğŸ‡¸",
            "Liberian": "ğŸ‡±ğŸ‡·", "Libyan": "ğŸ‡±ğŸ‡¾", "Liechtensteiner": "ğŸ‡±ğŸ‡®", "Lithuanian": "ğŸ‡±ğŸ‡¹", "Luxembourger": "ğŸ‡±ğŸ‡º",
            "Malagasy": "ğŸ‡²ğŸ‡¬", "Malawian": "ğŸ‡²ğŸ‡¼", "Malaysian": "ğŸ‡²ğŸ‡¾", "Maldivian": "ğŸ‡²ğŸ‡»", "Malian": "ğŸ‡²ğŸ‡±",
            "Maltese": "ğŸ‡²ğŸ‡¹", "Marshallese": "ğŸ‡²ğŸ‡­", "Mauritanian": "ğŸ‡²ğŸ‡·", "Mauritian": "ğŸ‡²ğŸ‡º", "Mexican": "ğŸ‡²ğŸ‡½",
            "Micronesian": "ğŸ‡«ğŸ‡²", "Moldovan": "ğŸ‡²ğŸ‡©", "MonÃ©gasque": "ğŸ‡²ğŸ‡¨", "Mongolian": "ğŸ‡²ğŸ‡³", "Montenegrin": "ğŸ‡²ğŸ‡ª",
            "Moroccan": "ğŸ‡²ğŸ‡¦", "Mozambican": "ğŸ‡²ğŸ‡¿", "Burmese": "ğŸ‡²ğŸ‡²", "Namibian": "ğŸ‡³ğŸ‡¦", "Nauruan": "ğŸ‡³ğŸ‡·",
            "Nepalese": "ğŸ‡³ğŸ‡µ", "Dutch": "ğŸ‡³ğŸ‡±", "New Zealander": "ğŸ‡³ğŸ‡¿", "Nicaraguan": "ğŸ‡³ğŸ‡®", "Nigerien": "ğŸ‡³ğŸ‡ª",
            "Nigerian": "ğŸ‡³ğŸ‡¬", "Norwegian": "ğŸ‡³ğŸ‡´", "Omani": "ğŸ‡´ğŸ‡²", "Pakistani": "ğŸ‡µğŸ‡°", "Palauan": "ğŸ‡µğŸ‡¼", "Palestinian": "ğŸ‡µğŸ‡¸",
            "Panamanian": "ğŸ‡µğŸ‡¦", "Papua New Guinean": "ğŸ‡µğŸ‡¬", "Paraguayan": "ğŸ‡µğŸ‡¾", "Peruvian": "ğŸ‡µğŸ‡ª", "Filipino": "ğŸ‡µğŸ‡­",
            "Polish": "ğŸ‡µğŸ‡±", "Portuguese": "ğŸ‡µğŸ‡¹", "Qatari": "ğŸ‡¶ğŸ‡¦", "Romanian": "ğŸ‡·ğŸ‡´", "Russian": "ğŸ‡·ğŸ‡º",
            "Rwandan": "ğŸ‡·ğŸ‡¼", "Saint Kittsian & Nevisian": "ğŸ‡°ğŸ‡³", "Saint Lucian": "ğŸ‡±ğŸ‡¨", "Saint Vincentian & Grenadine": "ğŸ‡»ğŸ‡¨",
            "Samoan": "ğŸ‡¼ğŸ‡¸", "San Marinese": "ğŸ‡¸ğŸ‡²", "Sao Tomean": "ğŸ‡¸ğŸ‡¹", "Saudi": "ğŸ‡¸ğŸ‡¦", "Senegalese": "ğŸ‡¸ğŸ‡³", "Serbian": "ğŸ‡·ğŸ‡¸", "Seychellois": "ğŸ‡¸ğŸ‡¨",
            "Sierra Leonean": "ğŸ‡¸ğŸ‡±", "Singaporean": "ğŸ‡¸ğŸ‡¬", "Slovak": "ğŸ‡¸ğŸ‡°", "Slovene": "ğŸ‡¸ğŸ‡®", "Solomon Islander": "ğŸ‡¸ğŸ‡§",
            "Somali": "ğŸ‡¸ğŸ‡´", "South African": "ğŸ‡¿ğŸ‡¦", "South Sudanese": "ğŸ‡¸ğŸ‡¸", "Spanish": "ğŸ‡ªğŸ‡¸", "Sri Lankan": "ğŸ‡±ğŸ‡°",
            "Sudanese": "ğŸ‡¸ğŸ‡©", "Surinamese": "ğŸ‡¸ğŸ‡·", "Swedish": "ğŸ‡¸ğŸ‡ª", "Swiss": "ğŸ‡¨ğŸ‡­", "Syrian": "ğŸ‡¸ğŸ‡¾", "Taiwanese": "ğŸ‡¹ğŸ‡¼",
            "Tajik": "ğŸ‡¹ğŸ‡¯", "Tanzanian": "ğŸ‡¹ğŸ‡¿", "Thai": "ğŸ‡¹ğŸ‡­", "Togolese": "ğŸ‡¹ğŸ‡¬", "Tongan": "ğŸ‡¹ğŸ‡´", "Trinidadian & Tobagonian": "ğŸ‡¹ğŸ‡¹",
            "Tunisian": "ğŸ‡¹ğŸ‡³", "Turkish": "ğŸ‡¹ğŸ‡·", "Turkmen": "ğŸ‡¹ğŸ‡²", "Tuvaluan": "ğŸ‡¹ğŸ‡»", "Ugandan": "ğŸ‡ºğŸ‡¬", "Ukrainian": "ğŸ‡ºğŸ‡¦",
            "Emirati": "ğŸ‡¦ğŸ‡ª", "British": "ğŸ‡¬ğŸ‡§", "American": "ğŸ‡ºğŸ‡¸", "Uruguayan": "ğŸ‡ºğŸ‡¾", "Uzbek": "ğŸ‡ºğŸ‡¿", "Vanuatuan": "ğŸ‡»ğŸ‡º",
            "Vatican": "ğŸ‡»ğŸ‡¦", "Venezuelan": "ğŸ‡»ğŸ‡ª", "Vietnamese": "ğŸ‡»ğŸ‡³", "Yemeni": "ğŸ‡¾ğŸ‡ª", "Zambian": "ğŸ‡¿ğŸ‡²", "Zimbabwean": "ğŸ‡¿ğŸ‡¼"
        ]
        
        if let emojiFlag = countryFlags[meal!.strArea] {
            let countryWithFlag = emojiFlag + " " + meal!.strArea
            cell.countryOfOrigin.text = countryWithFlag
        } else {
            cell.countryOfOrigin.text = meal!.strArea // Fallback to country name if emoji flag is not available
        }
        
        // Hide the ingredients count label for now since we're not using it
//        cell.numberOfIngredients.isHidden = true
        
        if let url = URL(string: meal!.strMealThumb + "/preview") {
            DispatchQueue.global().async {
                if let data = try? Data(contentsOf: url) {
                    OperationQueue.main.addOperation {
                        cell.thumbnailImage.image = UIImage(data: data)
                    }
                }
            }
        }
        
        return cell
    }
}
